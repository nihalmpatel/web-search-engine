Block Editor Handbook | WordPress Developer Resources WordPress.org Search WordPress.org for: Submit Toggle Menu Showcase Themes Plugins Mobile Support Documentation Forums Get Involved Five for the Future About Blog Hosting Get WordPress Block Editor Handbook Skip to content Search for: Search plugins Chapters Block Editor Handbook Key Concepts Developer Documentation Block API Reference Block Registration Edit and Save Attributes Deprecated Blocks Templates Annotations Filter Reference Block Filters Editor Filters (Experimental) Parser Filters Autocomplete SlotFills Reference PluginBlockSettingsMenuItem PluginDocumentSettingPanel PluginMoreMenuItem PluginPostPublishPanel PluginPostStatusInfo PluginPrePublishPanel PluginSidebar PluginSidebarMoreMenuItem RichText Reference Internationalization Accessibility Feature Flags Theming for the Block Editor Theme Support Backward Compatibility Deprecations Meta Boxes Designer Documentation Block Design Patterns Resources Animation Contributor Documentation Principles Design Principles & Vision Blocks are the Interface Reference Developer Contributions Getting Started Git Workflow Coding Guidelines Testing Overview Block Grammar Scripts Managing Packages Gutenberg Release Process Localizing Gutenberg Plugin React Native based mobile Gutenberg Documentation Contributions Copy Guidelines History Glossary Frequently Asked Questions Repository Management Outreach Tutorials Getting Started with JavaScript Plugins Background Loading JavaScript Extending the Block Editor Troubleshooting JavaScript Versions and Build Step Scope Your Code JavaScript Build Setup Blocks Writing Your First Block Type Applying Styles From a Stylesheet Introducing Attributes and Editable Fields Block Controls: Block Toolbar and Settings Sidebar Creating dynamic blocks Generate Blocks with WP-CLI Meta Boxes Store Post Meta with a Block Register Meta Field Create Meta Block Use Post Meta Data Finishing Touches Displaying Notices from Your Plugin or Theme Creating a Sidebar for Your Plugin Get a Sidebar up and Running Tweak the sidebar style and add controls Register the Meta Field Initialize the Input Control Update the Meta Field When the Input’s Content Changes Finishing Touches Introduction to the Format API Register a New Format Add a Button to the Toolbar Apply the Format When the Button Is Clicked Component Reference Animate Autocomplete BaseControl ButtonGroup Button Card CheckboxControl ClipboardButton ColorIndicator ColorPalette ColorPicker Dashicon DateTime DimensionControl Disabled Draggable DropZone DropdownMenu Dropdown ExternalLink FocalPointPicker FocusableIframe FontSizePicker FormFileUpload FormToggle FormTokenField Guide NavigateRegions HigherOrder WithConstrainedTabbing WithFallbackStyles WithFilters WithFocusOutside WithFocusReturn WithNotices WithSpokenMessages IconButton Icon IsolatedEventContainer KeyboardShortcuts MenuGroup MenuItem MenuItemsChoice Modal NavigableContainer Notice Panel Placeholder Popover BlockQuotation HorizontalRule Svg QueryControls RadioControl RangeControl ServerSideRender ResizableBox ResponsiveWrapper Sandbox ScrollLock SelectControl SlotFill Snackbar Spinner TabPanel TextControl TextareaControl ToggleControl Toolbar Tooltip TreeSelect VisuallyHidden Data Module Reference WordPress Core Data Annotations Block Types Data The Block Editor’s Data The Post Editor’s Data The Editor’s UI Data Notices Data The NUX (New User Experience) Data The Viewport Data Package Reference @wordpress/a11y @wordpress/annotations @wordpress/api-fetch @wordpress/autop @wordpress/babel-plugin-import-jsx-pragma @wordpress/babel-plugin-makepot @wordpress/babel-preset-default @wordpress/base-styles @wordpress/blob @wordpress/block-directory @wordpress/block-editor @wordpress/block-library @wordpress/block-serialization-default-parser @wordpress/block-serialization-spec-parser @wordpress/blocks @wordpress/browserslist-config @wordpress/components @wordpress/compose @wordpress/core-data @wordpress/custom-templated-path-webpack-plugin @wordpress/data-controls @wordpress/data @wordpress/date @wordpress/dependency-extraction-webpack-plugin @wordpress/deprecated @wordpress/docgen @wordpress/dom-ready @wordpress/dom @wordpress/e2e-test-utils @wordpress/e2e-tests @wordpress/edit-post @wordpress/edit-widgets @wordpress/editor @wordpress/element @wordpress/env @wordpress/escape-html @wordpress/eslint-plugin @wordpress/format-library @wordpress/hooks @wordpress/html-entities @wordpress/i18n @wordpress/is-shallow-equal @wordpress/jest-console @wordpress/jest-preset-default @wordpress/jest-puppeteer-axe @wordpress/keycodes @wordpress/library-export-default-webpack-plugin @wordpress/list-reusable-blocks @wordpress/media-utils @wordpress/notices @wordpress/npm-package-json-lint-config @wordpress/nux @wordpress/plugins @wordpress/postcss-themes @wordpress/priority-queue @wordpress/project-management-automation @wordpress/redux-routine @wordpress/rich-text @wordpress/scripts @wordpress/server-side-render @wordpress/shortcode @wordpress/token-list @wordpress/url @wordpress/viewport @wordpress/wordcount Browse: Home / Block Editor Handbook Block Editor Handbook Edit The Gutenberg project is transforming the way content is created on WordPress. A block editor was the first product launched creating a new methodology for working with content. This handbook provides documentation for how designers and developers can extend the editor, and also how you can start contributing to the project. Using a system of Blocks to compose and format content, the new block-based editor is designed to create rich, flexible layouts for websites and digital products. Content is created in the unit of blocks instead of freeform text with inserted media, embeds and Shortcodes (there’s a Shortcode block though). Blocks treat Paragraphs, Headings, Media, and Embeds all as components that, when strung together, make up the content stored in the WordPress database, replacing the traditional concept of freeform text with embedded media and shortcodes. The new editor is designed with progressive enhancement, meaning that it is back-compatible with all legacy content, and it also offers a process to try to convert and split a Classic block into equivalent blocks using client-side parsing. Finally, the blocks offer enhanced editing and format controls. The Editor offers rich new value to users with visual, drag-and-drop creation tools and powerful developer enhancements with modern vendor packages, reusable components, rich APIs and hooks to modify and extend the editor through Custom Blocks, Custom Block Styles and Plugins.   Handbook navigation Key Concepts → About Blog Hosting Donate Support Developers Get Involved Showcase Plugins Themes WordCamp WordPress.TV BuddyPress bbPress WordPress.com Matt Privacy Public Code @WordPress WordPress Code is Poetry. Skip to toolbar About WordPress About WordPress WordPress.org Documentation Support Feedback Search Log In Register