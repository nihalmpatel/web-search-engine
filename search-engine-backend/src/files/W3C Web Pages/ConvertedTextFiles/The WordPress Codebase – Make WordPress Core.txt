The WordPress Codebase – Make WordPress Core Have you taken the WordPress 2019 Survey yet? Skip to content WordPress.org Search WordPress.org for: Submit Toggle Menu Showcase Themes Plugins Mobile Support Documentation Forums Get Involved Five for the Future About Blog Hosting Get WordPress Menu Make WordPress Core Tickets Components Handbook Browse Source Trac Timeline Create a New Ticket Hide welcome box Welcome! The WordPress core development team builds WordPress! Follow this site for general updates, status reports, and the occasional code debate. There’s lots of ways to contribute: Found a bug? Create a ticket in our bug tracker. Want to contribute? Get started quickly with our tickets marked as good first bugs for new contributors or join a bug scrub. There’s more on our reports page, like patches needing testing. Other questions? We also have a detailed handbook for contributors, complete with tutorials. Communication We use Slack for real-time communication. Contributors live all over the world, so there are discussions happening at all hours of the day. Our core development meeting is every Wednesday at 20:00 UTC in the #core channel on Slack. Anyone can join and participate or listen in! Search Chapters About Project Organization Our Philosophies Communication How the Release Cycle Works Features as Plugins Version Numbering Updating Bundled Theme Versions Releasing Major Versions Releasing Minor Versions Releasing Beta Versions Licensing & Copyright Getting Started at a Contributor Day Contribute with Testing Automated Testing JavaScript: QUnit PHP: PHPUnit Writing PHP Tests Beta Testing User Testing Usability Reporting Bugs Reporting Security Vulnerabilities Bug Gardening Testing a Patch Write a Call for Testing Contribute with Code Code Refactoring PHP Compatibility and WordPress Versions The Code Repository (Git) The WordPress Codebase The Code Repository (SVN) Researching Code History The Bug Tracker (Trac) Trac Workflow Keywords Design Decisions Fixing Bugs Contribute with Docs Inline Docs JavaScript Docs Closed JS docs file tickets In-progress JS docs file tickets Unclaimed files Best Practices Post & Comment Guidelines Workflows & Tools WordPress Coding Standards PHP Coding Standards Accessibility Coding Standards CSS Coding Standards HTML Coding Standards JavaScript Coding Standards Inline Documentation Standards PHP Documentation Standards JavaScript Documentation Standards Browser support Core APIs Spelling Internationalization Writing Patches Commit Messages Backporting Commits When you become a committer Tutorials & Guides Getting Started Installing WordPress Locally Installing from a Zip File Installing via SVN Installing a Local Server Installing VVV Installing DesktopServer Installing MAMP Installing WampServer Installing XAMPP Installing a Version Control System Working with Patches Working with Trac New User Quick Start Guide Opening a Ticket Submitting a Patch Coordinating Devchat Credits Glossary Home / Handbook / Contribute with Code / The WordPress Codebase The WordPress Codebase Topics How Code In WordPress Is Organized wp-content wp-includes wp-admin JavaScript and CSS Searching and Browsing Code History Installation Database Upgrades File Updates Exploring The Code WordPress is managed by a centralized version control system called Subversion. A mirror of this repository is also available via Git, a distributed VCS. The WordPress codebase can be accessed in a number of ways: using Subversion, using Git, through Trac (the bug tracker), and via direct download: Subversion: The repository is located at https://develop.svn.wordpress.org/. The main development branch – called trunk– is https://develop.svn.wordpress.org/trunk. Git: The repository is located at git://develop.git.wordpress.org/. There is also a mirror of the WordPress repository on Github, though issues and pull requests on Github are not currently accepted. Trac: The repository can be viewed through the browser at https://core.trac.wordpress.org/browser/. A log of changesets can be viewed at https://core.trac.wordpress.org/log/. Download: The latest stable version of WordPress can be downloaded at https://wordpress.org/latest.zip. The latest nightly build (2300 GMT) can be found at https://wordpress.org/nightly-builds/wordpress-latest.zip. How Code In WordPress Is Organized #How Code In WordPress Is Organized If you are using the “develop” repository, as mentioned above, the core codebase is in the src directory. A downloaded package serves a “built” version of this directory, thus placing these files in the root. The codebase consists of around 1000 files and directories. Initial bootstrap files, such as index.php, wp-load.php, wp-blog-header.php, and wp-settings.php, appear in this src directory. Special handlers such as the XML-RPC, trackback, and comment submission endpoints, are also in the root. The remaining files are divided into three distinct directories: wp-admin, wp-includes, and, to some extent, wp-content. wp-content #wp-content The wp-content directory consists of user-defined and site-specific files, including themes, plugins, and uploads. The repository only contains a wp-content directory for the bundled plugins (e.g. Hello Dolly) and themes (e.g. Twenty Fifteen). Top ↑ wp-includes #wp-includes The wp-includes directory consists of the primary core and third-party libraries for WordPress. Many of these files are loaded as the application is bootstrapped. The files in wp-includes go by a (mostly) standard set of prefixes and suffixes: class-*.php – PHP classes. Some of these are external libraries. ms-*.php – Code specific to WordPress multisite functionality. default-*.php – Code that implements or defines default functionality, namely constants, widgets, and filters. *deprecated.php – Functions which are deprecated. *-template.php – Template functions for the relevant API. The files in wp-admin/includes follow similar naming conventions. Top ↑ wp-admin #wp-admin The wp-admin directory contains the code powering the administration area of WordPress. The primary bootstrap is wp-admin/admin.php. Other special files include admin-header.php and admin-footer.php, the AJAX handler admin-ajax.php, and the generic POST handler admin-post.php. Most of the files in the wp-admin directory are pages in the WordPress admin interface. The wp-admin/includes directory consists of the primary core and third-party libraries available and used in the administration area. Some of these are loaded as the admin is bootstrapped; see wp-admin/includes/admin.php for the primary list of files included. Top ↑ JavaScript and CSS #JavaScript and CSS The wp-admin and wp-includes directories also have js and css directories, for scripts and styles, respectively. Third-party scripts are packaged in a compressed and minified state, which are available at https://wordpress.org/download/source/. Both minified and development versions are included for core scripts and styles, with the minified versions receiving the suffixes .min.js and .min.css. The wp-includes directory has a number of third-party libraries in folders. The wp-includes/js directory, in particular, has jquery and tinymce directories, with the former holding jQuery, jQuery UI, and various plugins, and the latter holding TinyMCE and various TinyMCE core and WordPress-specific extensions. The wp-includes/script-loader.php file registers all bundled scripts and styles. Each script and style is given a date-specific version number (yyyymmdd), which is bumped by a committer when the stylesheet changes. The version number is added to the URL, forcing the browser cache to clear and the new CSS or JavaScript to be loaded. Top ↑ Searching and Browsing Code History #Searching and Browsing Code History To search the codebase, developers rely on either a project search tool in their code editor or IDE, or command-line utilities such as ack or grep. Browsing the codebase on Trac is manageable, but one particular feature is noteworthy: Trac includes an excellent user interface for the Subversion blame command. To blame a line of code means to determine who last edited that line and when. To access this in Trac when browsing a file, click the Annotate link in the top right corner. Most consider the UI far more efficient than individual svn blame commands. Core committers do not make changes to WordPress lightly, and commits should never occur without as complete understanding of the existing code as possible. If the code causes a bug, was that always the case? When was it introduced? Why? Is the code in question a fix for a different bug? These questions are very important. Note: To learn more about code history, read the section on Researching Code History With Subversion Annotate. Top ↑ Installation #Installation When a WordPress install is initially run, if a wp-config.php file cannot be located, the wp-load.php file will suggest you visit wp-admin/setup-config.php to create the configuration file. Once this is done, you’ll be taken to wp-admin/install.php. At this point, the database tables are created. The database schema is stored in wp-admin/includes/schema.php, and the installation libraries are primarily located in wp-admin/includes/upgrade.php (where else are they located? we should be specific here). Top ↑ Database Upgrades #Database Upgrades Database upgrade instructions are included in wp-admin/includes/upgrade.php. Whenever a database change is needed with a new version of WordPress – whether that means altering the database structure, or updating some database content – an upgrade routine can be triggered. Indeed, you can safely update from WordPress 0.70 to the latest version and the database will keep up with the more than a decade of changes. Knowing when to upgrade is handled by a number in wp-includes/version.php, the WordPress database version. This number corresponds to a revision number of the codebase, generally the revision that last introduced a database upgrade routine. When the number in the code differs from the number stored in the database, the routines in wp-admin/includes/upgrade.php are run. The function wp_upgrade() calls upgrade_all() (among other functions), which will run the appropriate routines in sequence. In order to trigger a new routine, a “schema bump” – changing the right numbers, including the WordPress database version in version.php – needs to occur. Changes to the database structure are handled by a function called dbDelta(), which takes the table definitions, compares them to the existing schema, and makes any changes that are required – for example, adding new tables, altering fields, adding indexes. For dbDelta() to run over the core table definitions, the DB version in version.php simply needs to be bumped. Top ↑ File Updates #File Updates Core developers generally distinguish between database “upgrades” and version “updates.” Updating WordPress to the newest codebase (via the user interface) triggers a complex series of actions. Prior to any update, WordPress has already polled api.wordpress.org to determine whether it needs to update, and if so, where to find the new version. Once the update is triggered, WordPress will download the ZIP archive and unzip it into a temporary directory in wp-content/upgrade. A single file, wp-admin/includes/update-core.php, will be copied out of the temporary directory and over the existing wp-admin/includes/update-core.php, at which point it will be executed. Thus, the newly downloaded code handles the main process of copying over the new files. This allows us to provide instructions specific to the new version, such as which files are old and can be removed. Top ↑ Exploring The Code #Exploring The Code These tools may be useful in exploring the WordPress codebase: The Official WordPress Code Reference QueryPosts.com Westi’s PHPXref The Git mirror, mirrored to GitHub Handbook navigation ← The Code Repository (Git) The Code Repository (SVN) → About Blog Hosting Donate Support Developers Get Involved Showcase Plugins Themes WordCamp WordPress.TV BuddyPress bbPress WordPress.com Matt Privacy Public Code @WordPress WordPress Code is Poetry. s search c compose new post r reply e edit t go to top j go to the next post or comment k go to the previous post or comment o toggle comment visibility esc cancel edit post or comment Please enable JavaScript to view this page properly. Skip to toolbar About WordPress About WordPress WordPress.org Documentation Support Feedback Search Log In Register Notifications