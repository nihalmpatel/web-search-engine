<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
 <head profile="http://gmpg.org/xfn/11"> 
  <meta charset="utf-8"> 
  <script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-P24PF4B');</script> 
  <!--
<meta property="fb:page_id" content="6427302910" />
--> 
  <link rel="dns-prefetch" href="//s.w.org"> 
  <link rel="dns-prefetch" href="//fonts.googleapis.com"> 
  <link rel="dns-prefetch" href="//fonts.gstatic.com"> 
  <link rel="dns-prefetch" href="//www.googletagmanager.com"> 
  <meta name="google-site-verification" content="7VWES_-rcHBcmaQis9mSYamPfNwE03f4vyTj4pfuAw0"> 
  <meta name="viewport" content="width=device-width, initial-scale=1"> 
  <title>AJAX in Plugins « WordPress Codex</title> 
  <link rel="stylesheet" href="//s.w.org/style/codex-wp4.css?3"> 
  <meta name="referrer" content="always"> 
  <link href="//s.w.org/wp-includes/css/dashicons.min.css?20181204" rel="stylesheet" type="text/css"> 
  <link href="//fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,600italic,400,300,600&amp;subset=latin,cyrillic-ext,greek-ext,greek,vietnamese,latin-ext,cyrillic" rel="stylesheet" type="text/css"> 
  <link rel="stylesheet" href="//s.w.org/style/wp4.css?80"> 
  <link rel="shortcut icon" href="//s.w.org/favicon.ico?2" type="image/x-icon"> 
  <script type="text/javascript" src="//s.w.org/wp-includes/js/jquery/jquery.js?v=1.11.1"></script> 
  <script>document.cookie='devicePixelRatio='+((window.devicePixelRatio === undefined) ? 1 : window.devicePixelRatio)+'; path=/';</script> 
  <!--[if IE]>
    <script type="text/javascript" src="/skins/common/IEFixes.js"></script>
    <meta http-equiv="imagetoolbar" content="no" />
<![endif]--> 
  <script type="text/javascript">wgBreakFrames=false;wgContentLanguage='en';</script> 
 </head> 
 <body id="wordpress-org" class="wporg-responsive wporg-codex"> 
  <noscript>
   <iframe src="https://www.googletagmanager.com/ns.html?id=GTM-P24PF4B" height="0" width="0" style="display:none;visibility:hidden"></iframe>
  </noscript> 
  <div id="wporg-header"> 
   <div class="wrapper"> 
    <h1><a href="//wordpress.org">WordPress.org</a></h1> 
    <div id="head-search"> 
     <form action="//wordpress.org/search/do-search.php" method="get"> 
      <label for="global-search" class="screen-reader-text">Search WordPress.org for:</label> 
      <input id="global-search" class="text" name="search" type="text" value="" maxlength="150" placeholder="Search WordPress.org"> 
      <button type="submit" class="button"><span class="screen-reader-text">Submit</span></button> 
     </form> 
    </div> 
    <div style="clear:both"></div> 
    <button id="mobile-menu-button" aria-expanded="false"><span class="screen-reader-text">Toggle Menu</span></button> 
    <nav aria-label="Main Menu"> 
     <ul id="wporg-header-menu"> 
      <li class="menu-item"><a href="//wordpress.org/showcase/" data-title="See some of the sites built on WordPress.">Showcase</a></li> 
      <li class="menu-item"><a href="//wordpress.org/themes/" data-title="Find just the right look for your website.">Themes</a></li> 
      <li class="menu-item"><a href="//wordpress.org/plugins/" data-title="Plugins can extend WordPress to do almost anything you can imagine.">Plugins</a></li> 
      <li class="menu-item"><a href="//wordpress.org/mobile/" data-title="Take your website on the go!">Mobile</a></li> 
      <li class="menu-item"><a href="//wordpress.org/support/" data-title="Forums, documentation, help." aria-current="true" class="current">Support</a>
       <ul class="nav-submenu">
        <li><a href="//wordpress.org/support/" title="Documentation, tutorials, best practices.">Documentation</a></li>
        <li><a href="//wordpress.org/support/forums/" title="Support and discussion forums.">Forums</a></li>
       </ul>
       <div class="uparrow"></div></li> 
      <li class="menu-item"><a href="//make.wordpress.org/" data-title="Contribute your knowledge.">Get Involved</a></li> 
      <li class="menu-item"><a href="//wordpress.org/about/" data-title="About the WordPress Organization, and where we're going.">About</a></li> 
      <li class="menu-item"><a href="//wordpress.org/news/" data-title="Come here for the latest scoop.">Blog</a></li> 
      <li class="menu-item"><a href="//wordpress.org/hosting/" data-title="Find a home for your blog.">Hosting</a></li> 
      <li id="download" class="button download-button menu-item"><a href="//wordpress.org/download/" data-title="Get it. Got it? Good.">Get WordPress</a></li> 
     </ul> 
    </nav> 
    <div style="clear:both"></div> 
   </div> 
  </div> 
  <div id="headline"> 
   <div class="wrapper"> 
    <h2><a href="/">Codex</a></h2> 
    <div class="portlet" id="p-personal"> 
     <p class="login">Codex tools: <a href="/index.php?title=Special:UserLogin&amp;returnto=AJAX+in+Plugins">Log in</a> </p> 
    </div> 
   </div> 
  </div> 
  <div id="pagebody"> 
   <div class="wrapper"> 
    <div class="col-10" id="bodyContent"> 
     <div id="siteNotice">
      <div id="localNotice" lang="en" dir="ltr">
       <div style="clear:both; background-color:#e5f5fa; border-left:4px solid #00a0d2; padding:10px 12px 8px; margin:0.5em auto 1.5em auto;">
        <span class="dashicons dashicons-info" style="color:#00a0d2"></span> Interested in functions, hooks, classes, or methods? Check out the new 
        <a rel="nofollow" class="external text" href="http://developer.wordpress.org/reference">WordPress Code Reference</a>!
       </div> 
      </div>
     </div> 
     <h2 class="pagetitle">AJAX in Plugins</h2> 
     <!-- start content --> 
     <div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr">
      <p class="LanguageLinks" style="border:1px solid #CCCCCC; line-height:1.5; text-align:left; color:#333333; font-size:90%; padding:10px;"><span style="white-space:nowrap;"><a href="https://codex.wordpress.org/Multilingual_Codex" title="Multilingual Codex" class="mw-redirect">Languages</a>:</span> <strong class="selflink">English</strong> • <a rel="nofollow" class="external text" href="https://wpdocs.osdn.jp/AJAX">in Plugins 日本語</a> <a href="https://codex.wordpress.org/ko:%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8%EC%97%90%EC%84%9C_AJAX_%EA%B5%AC%ED%98%84" title="ko:플러그인에서 AJAX 구현">한국어</a> • <small>(<a href="https://codex.wordpress.org/Multilingual_Codex#Language_Cross_Reference" title="Multilingual Codex" class="mw-redirect">Add your language</a>)</small> </p> 
      <div id="toc" class="toc">
       <div id="toctitle">
        <h2>Contents</h2>
       </div> 
       <ul> 
        <li class="toclevel-1 tocsection-1"><a href="#Introduction"><span class="tocnumber">1</span> <span class="toctext">Introduction</span></a></li> 
        <li class="toclevel-1 tocsection-2"><a href="#Ajax_on_the_Administration_Side"><span class="tocnumber">2</span> <span class="toctext">Ajax on the Administration Side</span></a> 
         <ul> 
          <li class="toclevel-2 tocsection-3"><a href="#Separate_JavaScript_File"><span class="tocnumber">2.1</span> <span class="toctext">Separate JavaScript File</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1 tocsection-4"><a href="#Ajax_on_the_Viewer-Facing_Side"><span class="tocnumber">3</span> <span class="toctext">Ajax on the Viewer-Facing Side</span></a> 
         <ul> 
          <li class="toclevel-2 tocsection-5"><a href="#The_post-load_JavaScript_Event"><span class="tocnumber">3.1</span> <span class="toctext">The post-load JavaScript Event</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1 tocsection-6"><a href="#Error_Return_Values"><span class="tocnumber">4</span> <span class="toctext">Error Return Values</span></a></li> 
        <li class="toclevel-1 tocsection-7"><a href="#Debugging"><span class="tocnumber">5</span> <span class="toctext">Debugging</span></a></li> 
        <li class="toclevel-1 tocsection-8"><a href="#Further_Reading_-_External_Resources"><span class="tocnumber">6</span> <span class="toctext">Further Reading - External Resources</span></a></li> 
        <li class="toclevel-1 tocsection-9"><a href="#Related_References"><span class="tocnumber">7</span> <span class="toctext">Related References</span></a></li> 
       </ul> 
      </div> 
      <h2><span class="mw-headline" id="Introduction">Introduction</span></h2> 
      <p>This article, aimed at plugin developers, describes how to add Ajax to a plugin. Before reading this article, you should be familiar with the following: </p> 
      <ul>
       <li> <a href="https://codex.wordpress.org/AJAX" title="AJAX">Ajax</a> - Overview of the technology</li> 
       <li> <a href="https://codex.wordpress.org/Writing_a_Plugin" title="Writing a Plugin">Writing a Plugin</a> - How to write a plugin</li> 
       <li> <a href="https://codex.wordpress.org/Plugin_API" title="Plugin API">Plugin API</a> - Filters and actions - what they are and how to use them</li> 
       <li> How to add HTML to the appropriate WordPress page, post, or screen -- for instance, if you want to add Ajax to administration screens you create, you will need to understand how to <a href="https://codex.wordpress.org/Adding_Administration_Menus" title="Adding Administration Menus" class="mw-redirect">add administration menus to WordPress</a>; if you want to add Ajax to the display of a single post, you'll need to figure out the right filters and actions to add HTML to that spot on viewer-facing blog screens. This article does not cover these topics.</li>
      </ul> 
      <p>If you're looking to use Ajax with the Gutenberg editor, please refer to the <a rel="nofollow" class="external text" href="https://wordpress.org/gutenberg/handbook/designers-developers/developers/packages/packages-api-fetch/">Gutenberg Handbook</a>. </p>
      <p>AJAX can also be used with the REST API, visit the <a rel="nofollow" class="external text" href="https://developer.wordpress.org/rest-api/">REST API developer handbook</a> to learn more. </p> 
      <h2><span class="mw-headline" id="Ajax_on_the_Administration_Side">Ajax on the Administration Side</span></h2> 
      <p>Since Ajax is already built into the core WordPress administration screens, adding more administration-side Ajax functionality to your plugin is fairly straightforward. </p>
      <p>This short example uses PHP to write our JavaScript in the footer of the page. This script then triggers the AJAX request when the page is fully loaded: </p> 
      <code><pre>
&lt;?php
add_action( 'admin_footer', 'my_action_javascript' ); // Write our JS below here

function my_action_javascript() {&nbsp;?&gt;
	&lt;script type="text/javascript" &gt;
	jQuery(document).ready(function($) {

		var data = {
			'action': 'my_action',
			'whatever': 1234
		};

		// since 2.8 ajaxurl is always defined in the admin header and points to admin-ajax.php
		jQuery.post(ajaxurl, data, function(response) {
			alert('Got this from the server: ' + response);
		});
	});
	&lt;/script&gt; &lt;?php
}
</pre></code> 
      <div style="background-color:#ffffff; border:1px solid #c6d9e9; color:#000000; padding:7px; margin:0.5em auto 0.5em auto; vertical-align:middle; overflow:hidden;">
       <b>NOTE:</b> Since 
       <a href="https://codex.wordpress.org/Version_2.8" title="Version 2.8">Version 2.8</a>, The JavaScript global variable 
       <tt>ajaxurl</tt> can be used in case you want to separate your JavaScript code from php files into JavaScript only files. 
       <b>This is true on the administration side only.</b> If you are using AJAX on the front-end, you need to make your JavaScript aware of the 
       <tt>admin-ajax.php</tt> url. A best practice is documented in the fourth example, below using 
       <tt>wp_localize_script()</tt>.
      </div> 
      <p>Then, set up a PHP function to handle the AJAX request. </p> 
      <pre>
&lt;?php 

add_action( 'wp_ajax_my_action', 'my_action' );

function my_action() {
	global $wpdb; // this is how you get access to the database

	$whatever = intval( $_POST['whatever'] );

	$whatever += 10;

        echo $whatever;

	wp_die(); // this is required to terminate immediately and return a proper response
}
</pre> 
      <p>Notice how the 'action' key's value 'my_action', defined in our JavaScript above, matches the latter half of the action 'wp_ajax_my_action' in our AJAX handler below. This is because it is used to call the server side PHP function through admin-ajax.php. If an action is not specified, admin-ajax.php will exit, and return <code>0</code> in the process. </p>
      <p>You will need to add a few details, such as error checking and verifying that the request came from the right place ( using <a href="https://codex.wordpress.org/Function_Reference/check_ajax_referer" title="Function Reference/check ajax referer">check_ajax_referer()</a> ), but hopefully the example above will be enough to get you started on your own administration-side Ajax plugin. </p>
      <p>Notice the use of <tt><a href="https://codex.wordpress.org/Function_Reference/wp_die" title="Function Reference/wp die"> wp_die()</a></tt>, instead of <tt>die()</tt> or <tt>exit()</tt>. Most of the time you should be using <tt>wp_die()</tt> in your Ajax callback function. This provides better integration with WordPress and makes it easier to test your code. </p> 
      <h3><span class="mw-headline" id="Separate_JavaScript_File">Separate JavaScript File</span></h3> 
      <p>The same example as the previous one, except with the JavaScript on a separate external file we'll call <tt>js/my_query.js</tt>. The examples are relative to a plugin folder. </p> 
      <pre>
jQuery(document).ready(function($) {
	var data = {
		'action': 'my_action',
		'whatever': ajax_object.we_value      // We pass php values differently!
	};
	// We can also pass the url value separately from ajaxurl for front end AJAX implementations
	jQuery.post(ajax_object.ajax_url, data, function(response) {
		alert('Got this from the server: ' + response);
	});
});
</pre> 
      <p>With external JavaScript files, we must first <a href="https://codex.wordpress.org/Function_Reference/wp_enqueue_script" title="Function Reference/wp enqueue script">wp_enqueue_script()</a> so they are included on the page. Additionally, we must use <a href="https://codex.wordpress.org/Function_Reference/wp_localize_script" title="Function Reference/wp localize script">wp_localize_script()</a> to pass values into JavaScript object properties, since PHP cannot directly <code>echo</code> values into our JavaScript file. The handler function is the same as the previous example. </p> 
      <pre>
&lt;?php
add_action( 'admin_enqueue_scripts', 'my_enqueue' );
function my_enqueue($hook) {
    if( 'index.php'&nbsp;!= $hook ) {
	// Only applies to dashboard panel
	return;
    }
        
	wp_enqueue_script( 'ajax-script', plugins_url( '/js/my_query.js', __FILE__ ), array('jquery') );

	// in JavaScript, object properties are accessed as ajax_object.ajax_url, ajax_object.we_value
	wp_localize_script( 'ajax-script', 'ajax_object',
            array( 'ajax_url' =&gt; admin_url( 'admin-ajax.php' ), 'we_value' =&gt; 1234 ) );
}

// Same handler function...
add_action( 'wp_ajax_my_action', 'my_action' );
function my_action() {
	global $wpdb;
	$whatever = intval( $_POST['whatever'] );
	$whatever += 10;
        echo $whatever;
	wp_die();
}
</pre> 
      <h2><span class="mw-headline" id="Ajax_on_the_Viewer-Facing_Side">Ajax on the Viewer-Facing Side</span></h2> 
      <p>Since WordPress 2.8, there is a hook similar to <tt><a href="https://codex.wordpress.org/Plugin_API/Action_Reference/wp_ajax_(action)" title="Plugin API/Action Reference/wp ajax (action)">wp_ajax_(action)</a></tt>: </p> 
      <ul>
       <li> <tt><a href="https://codex.wordpress.org/Plugin_API/Action_Reference/wp_ajax_nopriv_(action)" title="Plugin API/Action Reference/wp ajax nopriv (action)">wp_ajax_nopriv_(action)</a></tt> executes for users that are not logged in.</li>
      </ul> 
      <p>So, if you want it to fire on the front-end for both visitors and logged-in users, you can do this: </p> 
      <pre>
add_action( 'wp_ajax_my_action', 'my_action' );
add_action( 'wp_ajax_nopriv_my_action', 'my_action' );
</pre> 
      <p><b>Note:</b> Unlike on the admin side, the <code>ajaxurl</code> javascript global does not get automatically defined for you, unless you have <a rel="nofollow" class="external text" href="http://buddypress.org/">BuddyPress</a> or another Ajax-reliant plugin installed. So instead of relying on a global javascript variable, declare a javascript namespace object with its own property, <code>ajaxurl</code>. You might also use <a href="https://codex.wordpress.org/Function_Reference/wp_localize_script" title="Function Reference/wp localize script"> wp_localize_script()</a> to make the URL available to your script, and generate it using this expression: <code>admin_url( 'admin-ajax.php' )</code> </p>
      <p><b>Note 2:</b> Both front-end and back-end Ajax requests use <tt>admin-ajax.php</tt> so <tt><a href="https://codex.wordpress.org/Function_Reference/is_admin" title="Function Reference/is admin"> is_admin()</a></tt> will always return <b>true</b> in your action handling code. When selectively loading your Ajax script handlers for the front-end and back-end, and using the <tt><a href="https://codex.wordpress.org/Function_Reference/is_admin" title="Function Reference/is admin"> is_admin()</a></tt> function, your <tt>wp_ajax_(action)</tt> and <tt>wp_ajax_nopriv_(action)</tt> hooks MUST be inside the <i><b>is_admin() === true</b></i> part. </p>
      <p>Ajax requests bound to either <tt>wp_ajax_</tt> or <tt>wp_ajax_nopriv_</tt> actions are executed in the WP Admin context. Carefully review the actions you are performing in your code since unprivileged users or visitors will be able to trigger requests with elevated permissions that they may not be authorized for. </p> 
      <pre>
if ( is_admin() ) {
    add_action( 'wp_ajax_my_frontend_action', 'my_frontend_action' );
    add_action( 'wp_ajax_nopriv_my_frontend_action', 'my_frontend_action' );
    add_action( 'wp_ajax_my_backend_action', 'my_backend_action' );
    // Add other back-end action hooks here
} else {
    // Add non-Ajax front-end action hooks here
}
</pre> 
      <p>Here the Ajax action <tt>my_frontend_action</tt> will trigger the PHP function <tt>my_frontend_action_callback()</tt> for all users. The Ajax action <tt>my_backend_action</tt> will trigger the PHP function <tt>my_backend_action_callback()</tt> for logged-in users only. </p> 
      <h3><span class="mw-headline" id="The_post-load_JavaScript_Event">The post-load JavaScript Event</span></h3> 
      <p>Plugins and themes that insert content via Ajax must trigger the <code>post-load</code> event on <code>document.body</code> after content is inserted. Other scripts that depend on a JavaScript interaction after content insertion, such as <a rel="nofollow" class="external text" href="https://wordpress.org/plugins/add-to-any/">AddToAny</a> or a <a rel="nofollow" class="external text" href="http://desandro.github.io/masonry/">jQuery Masonry</a> script, listen for the <code>post-load</code> event to initialize their required JavaScript. When the <code>post-load</code> event is fired from <a rel="nofollow" class="external text" href="https://jetpack.me/support/infinite-scroll/">Jetpack's Infinite Scroll</a>, for example, AddToAny displays the share buttons for each post, and jQuery Masonry positions elements on the page. </p>
      <p>JavaScript triggering the <code>post-load</code> event after content has been inserted via Ajax: </p> 
      <pre>
jQuery( document.body ).trigger( 'post-load' );
</pre> 
      <p>JavaScript listening to the <code>post-load</code> event: </p> 
      <pre>
jQuery( document.body ).on( 'post-load', function () {
    // New content has been added to the page.
} );
</pre> 
      <p><b>Note on jQuery:</b> Beware of using jQuery's <code>load</code> method <em>with a selector expression</em> to insert content because it will cause <code>&lt;script&gt;</code> blocks in the response <a rel="nofollow" class="external text" href="https://api.jquery.com/load/#script-execution">to be stripped out</a>. </p> 
      <h2><span class="mw-headline" id="Error_Return_Values">Error Return Values</span></h2> 
      <p>If the Ajax request fails in <tt><a rel="nofollow" class="external text" href="http://core.trac.wordpress.org/browser/trunk/wp-admin/admin-ajax.php">wp-admin/admin-ajax.php</a></tt>, the response will be <i><b>-1</b></i> or <i><b>0</b></i>, depending on the reason for the failure. Additionally, if the request succeeds, but the Ajax <tt>action</tt> does not match a WordPress hook defined with <tt>add_action('wp_ajax_(action)', ...)</tt> or <tt>add_action('wp_ajax_nopriv_(action)', ...)</tt>, then <tt>admin-ajax.php</tt> will respond <i><b>0</b></i>. </p> 
      <h2><span class="mw-headline" id="Debugging">Debugging</span></h2> 
      <p>To parse AJAX, WordPress must be reloaded through the admin-ajax.php script, which means that any PHP errors encountered in the initial page load will also be present in the AJAX parsing. If error_reporting is enabled, these will be echoed to the output buffer, polluting your AJAX response with error messages. </p>
      <p>Because of this, care must be taken when debugging Ajax as any PHP notices or messages returned may confuse the parsing of the results or cause your JavaScript to error. </p>
      <p>One option if you can't eliminate the messages and must run with <a href="https://codex.wordpress.org/Debugging_in_WordPress" title="Debugging in WordPress">debug turned on</a> is to clear the buffer immediately before returning your data. </p> 
      <pre>
    ob_clean();
    echo $whatever;
    wp_die();
</pre> 
      <p>It is also possible to use tools such as FirePHP to log debug messages to your browsers debug console. An alternative approach is to use a debugging proxy such as fiddler. </p> 
      <ul>
       <li> <a rel="nofollow" class="external text" href="http://wpengineer.com/1219/firephp-and-wordpress/">WPEngineer - FirePHP and Wordpress</a></li> 
       <li> <a rel="nofollow" class="external text" href="http://www.fiddler2.com/fiddler2/">Fiddler</a></li>
      </ul> 
      <h2><span class="mw-headline" id="Further_Reading_-_External_Resources">Further Reading - External Resources</span></h2> 
      <ul>
       <li> <a rel="nofollow" class="external text" href="http://ocaoimh.ie/2008/11/01/make-your-wordpress-plugin-talk-ajax/">Make your WordPress plugin talk AJAX</a> - examples on viewer-side AJAX for plugins</li> 
       <li> <a rel="nofollow" class="external text" href="http://byronyasgur.wordpress.com/2011/06/27/frontend-forward-facing-ajax-in-wordpress/">Frontend (forward facing) Ajax in WordPress</a></li> 
       <li> <a rel="nofollow" class="external text" href="http://pippinsplugins.com/using-ajax-your-plugin-wordpress-admin/">Using Ajax in Your Plugin and WordPress Admin</a></li> 
       <li> <a rel="nofollow" class="external text" href="http://pippinsplugins.com/loading-scripts-correctly-in-the-wordpress-admin/">Loading Scripts Correctly in the WordPress Admin</a></li> 
       <li> <a rel="nofollow" class="external text" href="http://www.jackreichert.com/2013/03/24/using-ajax-in-wordpress-development-the-quickstart-guide/">Using AJAX in WordPress Development. The Quick-and-Dirty QuickStart Guide</a></li>
      </ul> 
      <h2><span class="mw-headline" id="Related_References">Related References</span></h2> 
      <ul>
       <li> <a href="https://codex.wordpress.org/Plugin_API/Action_Reference/wp_ajax_(action)" title="Plugin API/Action Reference/wp ajax (action)">The 'wp_ajax_' hook</a></li> 
       <li> <a href="https://codex.wordpress.org/Function_Reference/WP_Ajax_Response" title="Function Reference/WP Ajax Response" class="mw-redirect">WP_Ajax_Response (responding to AJAX requests)</a></li> 
       <li> <a href="https://codex.wordpress.org/Function_Reference/wp_send_json" title="Function Reference/wp send json">wp_send_json function</a></li>
      </ul> 
      <!-- 
NewPP limit report
Cached time: 20190611140103
Cache expiry: 86400
Dynamic content: false
CPU time usage: 0.020 seconds
Real time usage: 0.023 seconds
Preprocessor visited node count: 162/1000000
Preprocessor generated node count: 506/1000000
Post‐expand include size: 1812/2097152 bytes
Template argument size: 1108/2097152 bytes
Highest expansion depth: 4/40
Expensive parser function count: 0/100
--> 
      <!-- 
Transclusion expansion time report (%,ms,calls,template)
100.00%    7.361      1 - -total
 66.66%    4.907      1 - Template:Languages
 30.43%    2.240      1 - Template:Note
 16.47%    1.212      1 - Template:ja
 15.84%    1.166      1 - Template:Message
 15.28%    1.125      1 - Template:en
 14.88%    1.095      1 - Template:ko
--> 
     </div>
     <div class="printfooter">
       Retrieved from "
      <a dir="ltr" href="https://codex.wordpress.org/index.php?title=AJAX_in_Plugins&amp;oldid=164432">https://codex.wordpress.org/index.php?title=AJAX_in_Plugins&amp;oldid=164432</a>"
     </div> 
     <div id="catlinks">
      <div id="catlinks" class="catlinks" data-mw="interface">
       <div id="mw-normal-catlinks" class="mw-normal-catlinks">
        <a href="https://codex.wordpress.org/Special:Categories" title="Special:Categories">Categories</a>: 
        <ul>
         <li><a href="https://codex.wordpress.org/Category:Advanced_Topics" title="Category:Advanced Topics">Advanced Topics</a></li>
         <li><a href="https://codex.wordpress.org/Category:WordPress_Development" title="Category:WordPress Development">WordPress Development</a></li>
         <li><a href="https://codex.wordpress.org/Category:Plugins" title="Category:Plugins">Plugins</a></li>
         <li><a href="https://codex.wordpress.org/Category:UI_Link" title="Category:UI Link">UI Link</a></li>
        </ul>
       </div>
      </div>
     </div> 
     <!-- end content --> 
    </div> 
    <div class="col-2"> 
     <ul class="submenu"> 
      <li id="n-mainpage"><a href="/Main_Page">Home Page</a></li> 
      <li><a href="/WordPress_Lessons">WordPress Lessons</a></li> 
      <li><a href="/Getting_Started_with_WordPress">Getting Started</a></li> 
      <li><a href="/Working_with_WordPress">Working with WordPress</a></li> 
      <li><a href="/Blog_Design_and_Layout">Design and Layout</a></li> 
      <li><a href="/Advanced_Topics">Advanced Topics</a></li> 
      <li><a href="/Troubleshooting">Troubleshooting</a></li> 
      <li><a href="/Developer_Documentation">Developer Docs</a></li> 
      <li><a href="/About_WordPress">About WordPress</a></li> 
     </ul> 
     <h3>Codex Resources</h3> 
     <ul class="submenu"> 
      <li id="n-portal"><a href="/Codex:Community_Portal">Community portal</a></li> 
      <li id="n-currentevents"><a href="/Current_events">Current events</a></li> 
      <li id="n-recentchanges"><a href="/Special:RecentChanges">Recent changes</a></li> 
      <li id="n-randompage"><a href="/Special:Random">Random page</a></li> 
      <li id="n-help"><a href="/Help:Contents">Help</a></li> 
     </ul> 
    </div> 
   </div> 
  </div> 
  <div id="wporg-footer"> 
   <div class="wrapper"> 
    <ul> 
     <li><a href="//wordpress.org/about/" title="An introduction to the WordPress project">About</a></li> 
     <li><a href="//wordpress.org/news/" title="News and Updates">Blog</a></li> 
     <li><a href="//wordpress.org/hosting/" title="Recommended web hosting providers">Hosting</a></li> 
     <li><a href="https://wordpressfoundation.org/donate/" title="Donate to the WordPress Foundation">Donate</a></li> 
    </ul> 
    <ul> 
     <li><a href="//wordpress.org/support/" title="Forums, documentation, and other resources">Support</a></li> 
     <li><a href="//developer.wordpress.org" title="Resources for WordPress developers">Developers</a></li> 
     <li><a href="//make.wordpress.org/" title="Give back to WordPress through code, support, translation and more">Get Involved</a></li> 
    </ul> 
    <ul> 
     <li><a href="//wordpress.org/showcase/" title="Some of the best WordPress sites on the Web">Showcase</a></li> 
     <li><a href="//wordpress.org/plugins/" title="Add extra functionality to WordPress">Plugins</a></li> 
     <li><a href="//wordpress.org/themes/" title="Make your WordPress pretty">Themes</a></li> 
    </ul> 
    <ul> 
     <li><a href="//central.wordcamp.org/" title="Find a WordPress event near you">WordCamp</a></li> 
     <li><a href="//wordpress.tv/" title="Videos, tutorials, and WordCamp sessions">WordPress.TV</a></li> 
     <li><a href="//buddypress.org/" title="A set of plugins to transform your WordPress into a social network">BuddyPress</a></li> 
     <li><a href="//bbpress.org/" title="Fast, slick forums built on WordPress">bbPress</a></li> 
    </ul> 
    <ul> 
     <li><a href="//wordpress.com/?ref=wporg-footer" title="Hassle-free WordPress hosting">WordPress.com</a></li> 
     <li><a href="//ma.tt/" title="Co-founder of WordPress, an example of what WordPress can do">Matt</a></li> 
     <li><a href="//wordpress.org/about/privacy/" title="WordPress.org Privacy Policy">Privacy</a></li> 
     <li><a href="https://publiccode.eu/" target="_blank">Public Code</a></li> 
    </ul> 
    <ul> 
     <li><span class="dashicons dashicons-twitter"></span><a href="https://twitter.com/WordPress" title="Follow @WordPress on Twitter">@WordPress</a></li> 
     <li><span class="dashicons dashicons-facebook"></span><a href="https://www.facebook.com/WordPress/" title="Like WordPress on Facebook">WordPress</a></li> 
    </ul> 
   </div> 
   <p class="cip cip-image">Code is Poetry.</p> 
  </div> 
  <script src="https://s.w.org/style/js/navigation.min.js?20190128"></script> 
  <script type="text/javascript" src="https://gravatar.com/js/gprofiles.js"></script>  
  <!-- Cached 20190611140103 -->  
 </body>
</html>